/**
 * Purpose: demonstrate music player GUI App on Cocoa without using the
 * interface builder. This program is executable on both MacOSX and on
 * Windows running GNUstep.
 * Cst420 Foundations of Distributed Applications
 * see http://pooh.poly.asu.edu/Cst420
 * @author Tim Lindquist (Tim.Lindquist@asu.edu), ASU Polytechnic, Engineering
 * based on GNUstep examples generated by Greory Casamento and Nicola.
 * with credits to Casper B Hansen for structure of nibless of apps, and
 * and Stefan Bidigaray for the use of NSSound and player app. Stefan's
 * player is released under the GNU Public License.
 * @version November 2013
 */

#import "NSOutlineViewTest.h"

NSString *songtitle;

@implementation NSOutlineViewTest: NSObject

-(id) initInWindow: (NSWindow * ) theWindow {
   NSTableColumn *keyColumn;
   NSScrollView *scrollView;

   window = theWindow;
   [window retain];
   keyColumn = [[NSTableColumn alloc] initWithIdentifier: @"Albums and Songs"];
   [keyColumn autorelease];
   [keyColumn setEditable: NO];
   [[keyColumn headerCell] setStringValue: @"Albums and Songs"];
   [keyColumn setMinWidth: 100];

   outlineView = [[NSOutlineView alloc]
                    initWithFrame: NSMakeRect (0, 0, 520, 170)];
   [outlineView retain];
   [outlineView addTableColumn: keyColumn];
   [outlineView setOutlineTableColumn: keyColumn];
   [outlineView setDrawsGrid: NO];
   [outlineView setIndentationPerLevel: 10];
   [outlineView setAllowsColumnReordering: NO];
   [outlineView setAutoresizesOutlineColumn: YES];
   [outlineView setIndentationMarkerFollowsCell: YES];

   [outlineView setDataSource: self];
   [outlineView setDelegate: self];

   [outlineView registerForDraggedTypes:
               [NSArray arrayWithObject: NSStringPboardType]];


   scrollView = [[NSScrollView alloc]
                   initWithFrame: NSMakeRect (20, 100, 520, 170)];
   [scrollView setDocumentView: outlineView];
   [outlineView release];
   [scrollView setHasHorizontalScroller: YES];
   [scrollView setHasVerticalScroller: YES];
   [scrollView setBorderType: NSBezelBorder];
   [scrollView setAutoresizingMask: (NSViewWidthSizable
                                     | NSViewHeightSizable)];
        
   [outlineView sizeToFit];

   [[window contentView] addSubview: scrollView];
   [scrollView release];
   return self;
}

// required methods for data source
- (id)outlineView: (NSOutlineView *)outlineView
            child: (NSInteger)index
           ofItem: (id)item {
  [self debug: [NSString stringWithFormat:@"child: %"PRIiPTR" ofItem: %@\n",
                          index, item]];

  NSString *stringOne = @"one";
  NSString *stringTwo = @"two";
  NSString *stringThree = @"Three";

  NSMutableArray *songArray = [[NSMutableArray alloc] init];
  [songArray addObject:stringOne];
  [songArray addObject:stringTwo];
  [songArray addObject:stringThree];

  songtitle = [songArray objectAtIndex:index];

  return songtitle;
}

- (BOOL)outlineView: (NSOutlineView *)outlineView
   isItemExpandable: (id)item {
   [self debug: [NSString stringWithFormat: @"In isItemExpandable: %@\n",item]];
   /*
   if ([item isEqual: @"Tim Lindquist Music Library"] ||
       [item isEqual: @"All the Greatest Hits"] ||
       [item isEqual: @"Classic and Polish Folk Music"] ||
       [item isEqual: @"Singles"] ||
       [item isEqual: @"Alone in Iz World"]) {
      return YES;
   }*/
   return NO;
}

- (NSInteger) outlineView: (NSOutlineView *)outlineView
   numberOfChildrenOfItem: (id)item {
   [self debug: [NSString stringWithFormat: @"In numberOfChildren: %@\n",item]];
   if (item == nil) {
      return 3;
   } 
   return 3;
}

- (id) outlineView: (NSOutlineView *)outlineView
       objectValueForTableColumn: (NSTableColumn *)tableColumn
       byItem: (id)item {
   NSString *value = nil;
  if([[[tableColumn headerCell] stringValue] isEqual: @"Albums and Songs"]){
         value = item;
  }
   return value;
}

// delegate methods

- (void) outlineView: (NSOutlineView *)aTableView
     willDisplayCell: (id)aCell
      forTableColumn: (NSTableColumn *)aTableColumn
                item: (id)item {
   //[self debug:@"outlineView:willDisplayCell:forTableColumn:item:\n"];
}

- (BOOL) outlineView: (NSOutlineView *)anOutlineView
    shouldSelectItem: (id)item {
   [self debug: [NSString stringWithFormat:@"should select item %@ ?\n",item]];
   return YES;
}

- (BOOL) outlineView: (NSTableView *)aTableView
          writeItems: (NSArray *) items
        toPasteboard: (NSPasteboard *) pboard {
   [self debug:[NSString stringWithFormat:@"writeItems %@\n", items]];
   [pboard declareTypes: [NSArray arrayWithObject: NSStringPboardType]
                  owner: self];

   [pboard setPropertyList: @"1"
                   forType: NSStringPboardType];
   return YES;
}

- (NSDragOperation) outlineView: (NSOutlineView *) ov
                   validateDrop: (id <NSDraggingInfo>) info
                   proposedItem: (id) item
             proposedChildIndex: (NSInteger) childIndex {
   [self debug:[NSString stringWithFormat:@"Validate drop %@ at %"PRIiPTR"",
                          item, childIndex]];
   return NSDragOperationCopy;
}

- (void) debug: (NSString*) aMessage{
   if(DEBUGON){
      //NSBundle*aBundle = [NSBundle bundleForClaas:[self class]];
      NSBundle*aBundle = [NSBundle mainBundle];
      // path to application: .../MusicPlayer/MusicPlayer.app
      NSString*pathSeg = [aBundle bundlePath];
      NSString * fileName = [NSString stringWithFormat:@"%s/%s",
                     [pathSeg UTF8String],[@"DebugMessageLog.txt" UTF8String]];
      NSFileHandle* fh = [NSFileHandle fileHandleForWritingAtPath: fileName];
      [fh seekToEndOfFile];
      [fh writeData: [aMessage dataUsingEncoding:NSUTF8StringEncoding]];
      [fh closeFile];
       //printf("debug: %s\n", [aMessage UTF8String]);
   }
}

@end
